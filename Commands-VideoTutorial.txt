SOURCE: https://www.youtube.com/watch?v=pWbMrx5rVBE&t=1029s

> cls (to clear)

> show dbs (to show databases)

> use <db_name> (to switch to a database AND create the DB in case it does not exist yet)

> db (to check which DB you are in)

>db.createUser({
	user: "Felipe",
	pwd: "123",
	roles: ["readWrite","dbAdmin"]
});
	PS: This is a simple one. Check other examples on the link below.
	SOURCE: https://docs.mongodb.com/manual/reference/method/db.createUser/

> db.createCollection('customers');  (create a collection called Customers [similar to tables in RDBMS. They store "documents"(or records)])

> show collections 

> db.customers.insert({firstName:"felipe", lastName:"padua"});

> db.customers.insert([{firstName:"felipe", lastName:"padua"},{firstName:"brianna", lastName:"kress", address:{street: "rua bla bla", city:"lavras"}, memberships: [mem1,mem2], gender:"female"}]); (Insert more than one; I also added a field called 'gender' and 'address' for the last document)

> db.customers.find();  (To show all the documents in the collection)
OR
> db.customers.find().pretty(); (To show the result with a better identation)

> db.customers.update({firstName:"Brianna"},{firstName:"Brianna", lastName:"padua kress", gender:"female"});  (first paramater is the Match [it will update objects which have firstName as 'Brianna']; second parameter is the updated document [you have to retype ALL fields - There is a workaround for that bellow with the 'SET'])

// The SET operator is a variation for the 'update' 
> db.customers.update({lastName:"silva"},{$set:{gender:"male"}}); (It will only add the field 'gender' and it will keep the other fields)

//UNSET - to remove a 
db.customers.update({lastName:"silva"},{$unset:{age:1}}); (remove AGE field)

> db.customers.update({lastName:"padua"},{$inc:{age:5}}); (to increment the age by 5)

> db.customers.update({firstName:"john"},{firstName:"john wayne", lastName:"armindo"},{upsert: true}); (It is going to update any document with firstName as john. If none, it is going to create a new document with these values)

// Change the name a Field
> db.customers.update({firstName:"Brianna"},{$rename{"gender":"sex"}});

// To remove
> db.customers.remove({firstName:"john"});

// Remove only the first document that matched (in this case: firstName)
> db.customers.remove({firstName:"john"},{justOne:true}); (even though, say, there were many "john", it will only delete the first found )

> db.customers.find({firstName:"felipe"}).pretty(); (find all docs with firstName="felipe")

// OR Operator
> db.customers.find({$or:[{firstName:"felipe"},{firstName:"brianna"}]}).pretty(); (find all docs with firstName="felipe" or "brianna")

// lt (less than), gt (greater than)
// lte (less than or equal to), gte (greater than or equal to)
> db.customers.find({age:{$lt:40}}); (find all customers with age < 40)

// SEE Insert on line 23
> db.customers.find({"address.city":"lavras"}); (find customers who live in Lavras)
PS: Note that you have to put address.city between quotes. (Newer versions might not need the quotes anymore. Check and see if it works)

// SEE Insert on line 23
> db.customers.find({memberships:"mem1"}); (find customers with 'mem1' in memberships array)

// Sorting
> db.customers.find().sort({lastName:1}); (PS: one means ASCENDING order, for DESCENDING put: {lastName:-1} )

// COUNT
> db.customers.find({lastName:"padua"}).count();

// LIMIT
> db.customers.find().limit(4); (It will only show the first 4)

// COMBINE LIMIT AND SORT
> db.customers.find().limit(4).sort({lastName:1});

// [VI] FOREACH, declare FUNCTION and print
> db.customers.find().forEach(function(x){print("Customer Name:" + x.firstName)});

--------------------------------------
-----> FROM MONGODB UNIVERSITY COURSE:

- You can create or own "_id" instead of letting Mongo generates one for you.
- You can also insert many elements at once:
- You can do ORDERED or UNORDERED inserts. (The default is ordered)
   - UNORDERED means that if one document fails to be inserted (say it has a duplicate _id), it will not stop (ordered) and it 
   wll insert the rest of thedocuments.
   
> db.myMovies.insertMany(
    [
        {
	    "_id" : "tt0084726",
	    "title" : "Star Trek II: The Wrath of Khan",
	    "year" : 1982,
	    "type" : "movie"
        },        
        {
	    "_id" : "tt1408101",
	    "title" : "Star Trek Into Darkness",
	    "year" : 2013,
	    "type" : "movie"
        },
        {
	    "_id" : "tt0117731",
	    "title" : "Star Trek: First Contact",
	    "year" : 1996,
	    "type" : "movie"
        }
    ],
    {
	ordered: false
    }
  );


> db.movieDetails.find({"awards.wins":2,"awards.nominations":2}).count()
  (find the amount [count()]  of collections with awards.wins=2 AND awards.nominations=2)
  
  > db.movies.find({"cast": "Angelina Jolie"}).pretty();
    (Find documents which contains the element "Angelina Jolie" in the Array called  "cast")
    
 > db.movies.find({"cast.0": "Angelina Jolie"}).pretty();
    (Find documents which contains the element "Angelina Jolie" as the FIRST ELEMENT in the Array called  "cast")
